package pro.sky.telegrambot.listener;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.User;
import com.pengrad.telegrambot.request.SendMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Service;
import pro.sky.telegrambot.model.NotificationTask;
import pro.sky.telegrambot.service.NotificationService;
import pro.sky.telegrambot.service.UserService;

import javax.annotation.PostConstruct;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.Optional;

@Service
public class TelegramBotUpdatesListener implements UpdatesListener{

private final Logger logger=LoggerFactory.getLogger(TelegramBotUpdatesListener.class);

@Autowired
private UserService userService;

@Autowired
private NotificationService notificationService;

@Autowired
private TelegramBot telegramBot;

@PostConstruct
public void init(){
    telegramBot.setUpdatesListener(this);
}

@Override
public int process(List<Update> updates){
    updates.forEach(update->{
        logger.info("Processing update: {}",update);

        com.pengrad.telegrambot.model.User tgUser=update.message().from();

        Message message=update.message();
        String text=message.text();
        Long chatId=message.chat().id();

        userService.registerIfNotExists(tgUser);

        String response="–ö–∞–∂–µ—Ç—Å—è —è —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª";

        if(text.equals("/start")){
            response="–ü—Ä–∏–≤–µ—Ç, "+tgUser.username()+"\n–Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª—å—â–∏–∫.\n"+"–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"+"01.01.2026 20:00 –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É";
        }else{

            Optional<String> saveResult=notificationService.processIncomingMessage(tgUser.id(),tgUser.username(),text);

            response=saveResult.orElse("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n01.01.2026 20:00 –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É");
        }


        telegramBot.execute(new SendMessage(chatId,response));
    });
    return UpdatesListener.CONFIRMED_UPDATES_ALL;
}

@EventListener
public void handleNotificationTask(NotificationTask task){
    String text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "+task.getText();
    try{
        telegramBot.execute(new SendMessage(task.getTelegramId(),text));
        logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}",task.getUsername(),text);
    }catch(Exception e){
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",task.getUsername(),text,e);
    }
}
}
